{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Gradient Boost","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"NTGatlhylfWX","colab_type":"text"},"source":["### DRILL: Improve this gradient boost model\n","\n","While this model is already doing alright, we've seen from the Type I and Type II error rates that there is definitely room for improvement.  Your task is to see how low you can get the error rates to go in the test set, based on your model in the training set.  Strategies you might use include:\n","\n","* Creating new features\n","* Applying more overfitting-prevention strategies like subsampling\n","* More iterations\n","* Trying a different loss function\n","* Changing the structure of the weak learner: Allowing more leaves in the tree, or other modifications"]},{"cell_type":"code","metadata":{"id":"BKw3tuwTgg1l","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import scipy\n","import matplotlib.pyplot as plt\n","\n","\n","from sklearn import ensemble\n","from sklearn import datasets\n","from sklearn.utils import shuffle\n","from sklearn.metrics import mean_squared_error"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"txrKnTwggrTQ","colab_type":"text"},"source":["Let's try with Sklearn but with a categorical outcome: if someone lives with a partner"]},{"cell_type":"code","metadata":{"id":"GkcCDR4Zg2ux","colab_type":"code","outputId":"a07fd016-28a7-4100-b41b-b677ac33fd4e","executionInfo":{"status":"ok","timestamp":1557799065110,"user_tz":240,"elapsed":882,"user":{"displayName":"Grace Delate","photoUrl":"https://lh5.googleusercontent.com/-zO02IMkE6L4/AAAAAAAAAAI/AAAAAAAACL4/REEZLsRG9Bg/s64/photo.jpg","userId":"07024464494321232631"}},"colab":{"base_uri":"https://localhost:8080/","height":272}},"source":["df = pd.read_csv((\n","    \"https://raw.githubusercontent.com/Thinkful-Ed/data-201-resources/\"\n","    \"master/ESS_practice_data/ESSdata_Thinkful.csv\")).dropna()\n","\n","# Definine outcome and predictors.\n","# Set our outcome to 0 and 1.\n","\n","y = df['partner'] - 1\n","X = df.loc[:, ~df.columns.isin(['partner', 'cntry', 'idno', 'ppltrst','pplfair','pplhlp'])]\n","#make the feature like last time this data was used?\n","X['ppl_avg'] = (df['ppltrst'] + df['pplfair'] + df['pplhlp']) / 3\n","#X['happy_young'] = np.where(X['agea'] <= 30, 0, 1) & (X['happy'] >= 8)\n","X['sad_old'] = np.where(X['agea'] >= 60, 0, 1) & (X['happy'] <= 3)\n","\n","#make the categorical var country into dummies\n","X = pd.concat([X, pd.get_dummies(df['cntry'])], axis = 1)\n","\n","#train and test set\n","offset = int(X.shape[0] * 0.9)\n","\n","# Put 90% of the data into the training set\n","X_train, y_train = X[:offset], y[:offset]\n","\n","#the other 10% in the test set\n","X_test, y_test = X[offset:], y[offset:]\n","\n","#more info on y\n","y.value_counts()\n","#looks like living with someone is the minority class, but not by much"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","  # This is added back by InteractiveShellApp.init_path()\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","  del sys.path[0]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0.0    5013\n","1.0    3134\n","Name: partner, dtype: int64"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"jlwk3DiX2pc_","colab_type":"code","outputId":"59f9dcc9-9107-4183-bd3e-6d897432a29b","executionInfo":{"status":"ok","timestamp":1557799070701,"user_tz":240,"elapsed":490,"user":{"displayName":"Grace Delate","photoUrl":"https://lh5.googleusercontent.com/-zO02IMkE6L4/AAAAAAAAAAI/AAAAAAAACL4/REEZLsRG9Bg/s64/photo.jpg","userId":"07024464494321232631"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["print(X.columns)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Index(['year', 'tvtot', 'happy', 'sclmeet', 'sclact', 'gndr', 'agea',\n","       'ppl_avg', 'sad_old', 'CH', 'CZ', 'DE', 'ES', 'NO', 'SE'],\n","      dtype='object')\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nmSXW3Bnir2N","colab_type":"text"},"source":["Our loss function has changed since our outcome is now binary. Our options are deviance or exponential. Deviance is used for logistic regression so we will use that."]},{"cell_type":"code","metadata":{"id":"L9j-9z89ip3z","colab_type":"code","outputId":"39f89106-97e6-4280-b2df-f71d192796af","executionInfo":{"status":"ok","timestamp":1557799172518,"user_tz":240,"elapsed":2464,"user":{"displayName":"Grace Delate","photoUrl":"https://lh5.googleusercontent.com/-zO02IMkE6L4/AAAAAAAAAAI/AAAAAAAACL4/REEZLsRG9Bg/s64/photo.jpg","userId":"07024464494321232631"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["# We'll make 500 iterations, use 2-deep trees, and set our loss function\n","params = {'n_estimators': 600,\n","         'max_depth':2,\n","         'loss': 'deviance'}\n","\n","#initialize and fit\n","\n","clf = ensemble.GradientBoostingClassifier(**params)\n","clf.fit(X_train, y_train)\n","\n","predict_train = clf.predict(X_train)\n","predict_test = clf.predict(X_test)\n","\n","#accuracy\n","table_train = pd.crosstab(y_train, predict_train, margins = True)\n","table_test = pd.crosstab(y_test, predict_test, margins = True)\n","\n","train_tI_errors = table_train.loc[0.0,1.0] / table_train.loc['All','All']\n","train_tII_errors = table_train.loc[1.0,0.0] / table_train.loc['All','All']\n","\n","test_tI_errors = table_test.loc[0.0,1.0]/table_test.loc['All','All']\n","test_tII_errors = table_test.loc[1.0,0.0]/table_test.loc['All','All']\n","\n","print((\n","    'Training set accuracy:\\n'\n","    'Percent Type I errors: {}\\n'\n","    'Percent Type II errors: {}\\n\\n'\n","    'Test set accuracy:\\n'\n","    'Percent Type I errors: {}\\n'\n","    'Percent Type II errors: {}'\n",").format(train_tI_errors, train_tII_errors, test_tI_errors, test_tII_errors))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training set accuracy:\n","Percent Type I errors: 0.04650845608292417\n","Percent Type II errors: 0.1756683033278778\n","\n","Test set accuracy:\n","Percent Type I errors: 0.05889570552147239\n","Percent Type II errors: 0.18282208588957055\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4Yp5p7dalGnJ","colab_type":"text"},"source":["Unlike decision trees, gradient boost solutions are not terribly easy to interpret on the surface. But they aren't quite a black box. We can get a measure of how important various features are by counting how many times a feature is used over the course of many decision trees."]},{"cell_type":"code","metadata":{"id":"cbt5L_JplJu9","colab_type":"code","outputId":"e6f3821e-09c1-4a77-86b8-6a48c855dd87","executionInfo":{"status":"ok","timestamp":1557798520926,"user_tz":240,"elapsed":724,"user":{"displayName":"Grace Delate","photoUrl":"https://lh5.googleusercontent.com/-zO02IMkE6L4/AAAAAAAAAAI/AAAAAAAACL4/REEZLsRG9Bg/s64/photo.jpg","userId":"07024464494321232631"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["feature_importance = clf.feature_importances_\n","\n","# Make importances relative to max importance.\n","feature_importance = 100.0 * (feature_importance / feature_importance.max())\n","sorted_idx = np.argsort(feature_importance)\n","pos = np.arange(sorted_idx.shape[0]) + .5\n","plt.subplot(1, 2, 2)\n","plt.barh(pos, feature_importance[sorted_idx], align='center')\n","plt.yticks(pos, X.columns[sorted_idx])\n","plt.xlabel('Relative Importance')\n","plt.title('Variable Importance')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAANgAAAEWCAYAAAAEtVmdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAHuxJREFUeJztnXm8FMW5978/AdkXEaLEoERCjIiK\ngKg3qBiN1wWjXmMw6lWib5CbGJerMd6b5BX3LSYaNSL6GnfjblBvXBLhui8gm4i4QowLCgYEAUV4\n3j+qRprhzDlzDtM9PePz/Xzmc7qrqquf7jO/qerqp56SmeE4TjpsUG0DHKeecYE5Toq4wBwnRVxg\njpMiLjDHSREXmOOkiAssAyRtLmmppFZllB0u6R+N5F8v6ZzKWuikhQusCEkPSTqrgfQDJb0vqXVz\n6zSzv5tZJzNbVRkrW4Ykk/SNatpQQNJcSXtV2460cYGtyw3AkZJUlP7vwC1m9nlzKmuJIOuZL9v9\ncIGty33AxsCuhQRJGwEjgBvj/v6Spkr6WNLbksYmyvaJLcWxkv4OPJZIax3L/EjSbElLJL0p6bhi\nIyT9t6QF8Zf+iFLGShohaZqkRZKelrRdORcpaaykOyXdHO2YKembkv5L0gfxuvZOlJ8k6XxJz8fr\n/rOk7on870maFe2YJGnrRN5cSb+QNAP4RNJtwObA/bHrfFosd2fsJSyW9LikbRJ1XC/pSkkPRnuf\nk9Q3kb+NpEclfSRpvqT/jukbSDpd0huSFkq6I2l36piZf4o+wDXAtYn944Bpif3hwLaEH6jtgPnA\nQTGvD2AEMXYE2ifSWscy+wN9AQG7A8uAQYm6Pwd+C7SN+Z8AW8X864Fz4vYOwAfATkAr4GhgLtC2\nxHUZ8I24PRZYAfwr0Dra+xbwS6AN8GPgrcSxk4B3gAHxuu4Gbo5534w2fjceexrwOrBhzJ8LTAN6\nA+0TaXsV2XcM0Dle96VF9/x6YCEwNNp7C/CnmNcZeA84BWgX93eKeScCzwJfi/VeDdyW2Xep2l/m\nPH6AYcAioF3cfwo4uZHylwK/KxLYlon8tQTWwPH3ASfG7YLAOiby7wB+nfiiFQR2FXB2UV1zgN1L\nnKdYYI8m8g4AlgKtbM2X1oBucX8ScEGifH/gM4Kwfw3ckcjbIIpxeNyfCxxTZMs6AivK7xbP3zVx\n3ckfvf2AV+L2D4GpJeqZDeyZ2O8FrCz1v6j0x7uIDWBmTwILgINiN2QocGshX9JOkiZK+lDSYmAM\n0KOomrdL1S9pX0nPxu7MIsKXJXn8P83sk8T+POCrDVS1BXBK7JYtinX1LlG2IeYntpcDC2zNQMzy\n+LdTokzymuYRWqse8XzzChlmtjqW3azEsesgqZWkC2JX7mOCAGHt+/J+YntZwrbewBslqt4CuDdx\nf2YDq4BNGrOnUrjASnMjcBRwJPCwmSW/jLcCE4DeZtYVGEfo7iVpcJqCpLaE7tVvgE3MrBvwP0XH\nbySpY2J/c+DdBqp7GzjXzLolPh3M7Layr7J59C6yaSXhh+hdwhcZgDhA1JvQihUovh/F+4cDBwJ7\nAV0JrT6se18b4m1gy0by9i26R+3M7J0S5SuKC6w0NxL+2T8mjCwm6Qx8ZGYrJA0lfDnKZUPCs8CH\nwOeS9gX2bqDcmZI2lLQrYYDlzgbKXAOMiS2qJHWMAzCdm2FPczhSUn9JHYCzgLtii3cHsL+kPSW1\nITwLfQo83Uhd81lbFJ3jMQuBDsB5zbDrAaCXpJMktZXUWdJOMW8ccK6kLQAk9ZR0YDPqXi9cYCUw\ns7mEL0hHQmuV5CfAWZKWAP+X8AUrt94lwAnxmH8SxFlc//sx713Cw/wYM3ulgbomE34ArojlXwdG\nlWtLC7iJ8Cz0PmEw4YRoxxxCS385oUU7ADjAzD5rpK7zgV/FrtuphB+0eYRW72XCwERZxHv63Xje\n94HXgD1i9mWE+/tI/H89SxgUygTFBz/HaRRJkwijhtdW25Zawlswx0kRF5jjpIh3ER0nRbwFc5wU\nqVvHyx49elifPn2qbYZTp0yZMmWBmfVsqlzdCqxPnz5Mnjy52mY4dYqkeU2X8i6i46SKC8xxUsQF\n5jgp4gJznBRxgTlOirjAHCdFXGCOkyIuMMdJkbp90TzzncX0Of3Bapvh1DBzL9h/vevwFsxxUsQF\n5jgp4gJznBRxgTlOiqQqMEn3SZoSQyqPjmnHSno1hmC+RtIVMb2npLslvRA/347pQyU9oxCq+mlJ\nW6Vps+NUkrRHEY8xs48ktQdekPQgIQrsIGAJ8BgwPZa9jBAd90lJmwMPA1sDrwC7mtnnCqtxnAcc\n0tDJoohHA7Tq0uRUHcdJnbQFdoKkg+N2b8IKJf9rZh9BCPZPiGsOIQZhf61Z1KSLpE6EIJQ3SOpH\nCFbZptTJzGw8MB6gba9+HgvBqTqpCUzScIJodjGzZTHs1yuEVqkhNgB2NrMVRfVcAUw0s4Ml9SHE\nSHecmiDNZ7CuhBjryyR9C9iZEMRzd0kbKSzlk+zqPQL8rLAjaWCinkKY41Ep2us4FSdNgT0EtJY0\nG7iAEFH1HcIz1POEFUvmAotj+ROAIZJmSHqZsKACwEXA+ZKmUseeJ059ktoX1sw+BfYtTpc02czG\nxxbsXsLSPZjZAmBkA/U8w5rnNIBfpWOx41SearQIY+NoYDtCt/C+NE6y7WZdmVwBXzLHWR8yF5iZ\nnZr1OR2nWrgnh+OkSN0OGmQ9XaUSUxuc+sNbMMdJkYoITFIfSS9Voi7HqSe8BXOcFKmkwFpF7/hZ\nkh6R1F7Sj6Nn/PToKd8BQNL1ksZJmhw960fE9FGS/ixpkqTXJJ0R08+SdFLhRJLOlXRiBW13nFSo\npMD6AVea2TbAIoIb1D1mtqOZbQ/MBo5NlO8DDAX2B8ZJahfTh8ZjtwMOlTQEuA44CkDSBsBhwM3F\nBkgaHUU7edWyxcXZjpM5lRTYW2Y2LW5PIQhogKQnJM0EjgC2SZS/w8xWm9lrwJvAt2L6o2a20MyW\nA/cAw+KC5Asl7QDsDUw1s4XFBpjZeDMbYmZDWnXoWsFLc5yWUclh+k8T26uA9oQV6Q8ys+mSRgHD\nE2WKp5NYE+nXEpx9NyW0aI6Te9Ie5OgMvCepDaEFS3KopA0k9QW2BObE9O9K6h4naR5EcAqG4Le4\nD7AjYTKm4+SetF80/xp4Dvgw/u2cyPs7wau+CzDGzFbEyZbPA3cDXwNuNrPJAGb2maSJwCIzW5Wy\n3Y5TESoisPiMNCCx/5tE9lUlDvurmY1pIP0fZnZQcWIc3NgZOHQ9THWcTKkJVylJ/YEHgHvjoEiT\nuDe9kweqIjAzG1Ui/XrCwEhx+suE5zTHqSnck8NxUqQmuogtoVLe9O4l76wP3oI5Toq4wBwnRVIR\nmKSxkjw0gPOlx1swx0mRsgQWJ1S+IukWSbMl3SWpg6S5ki6SNDMu5vCNMutbZxqLpK6S5sUXykjq\nKOltSW0k7RjjJU6TdLFP7nRqhea0YFsBfzCzrYGPgZ/E9MVmti1wBXBpmXWtM43FzBYD04DdY5kR\nwMNmthL4I3CcmQ0kOBI3iE9XcfJGcwT2tpkVHG9vBobF7dsSf3cps65S01huZ03w0cOA2yV1AzrH\nAKQAt5aq1KerOHmjOQIrZ3pJuSuaXA8cH1u+MwlBSAEmAPtI6g4MJixv5Dg1S3MEtrmkQgt1OPBk\n3B6Z+PvMOkc1TIPTWMxsKfACYa2wB8xslZktApZI2ikWO6wZNjtOVWmOwOYAP42LOWzEGi/5jSTN\nAE4ETi6zrsI0lqcISxoluR04Mv4tcCxwjaRphBVa/AHLqQlk1nSvLq7L9YCZDShKnwsMiQs3pIak\nTrF1Q9LpQC8zazTozZAhQ2zy5MlpmuV8iZE0xcyGNFWuVnwR95f0XwR75+HrhDk1QlkCK55QmUjv\n09hxkq4Evl2UfJmZ/bFM+wrnuZ21u4yOUxOU1UWsRdr26me9ji73tdwa3HveKYdyu4juKuU4KeIC\nc5wUSVVgkrpJ+kkTZQZK2q+MuoZL+pfKWec46ZN2C9aNNT6LpRgINCkwQtBSF5hTU6QtsAuAvtEL\n/k5JX4wgxAUgfgCcBYyMZUbGoKP3Re/5ZyVtF9/DjQFOjuV2Tdlux6kIab8HOx0YYGYDJR0M/AB4\nUNKGwJ7AfwAdCC+rjweQdDkh9vxBkr4D3BiPHwcsLYq5uBaSRgOjAVp16ZnqhTlOOWQ5yPEXYA9J\nbYF9gcfjAg/FDANuAjCzx4CNJXUp5wTuTe/kjcwEZmYrgEnAvxIcg/3FsVP3pC2wJawdj/524EfA\nrsBDJco8QfSwlzQcWGBmHzdQznFyT6oCi2t4PSXpJUkXA48QZiz/1cw+i8UmAv0LgxzAWGBw9NC/\nADg6lrsfONgHOZxaInVnXzM7vCipe1H+R4QliZKss/iDmb1KWPXScWqGWvGmbza++IOTB9xVynFS\nxAXmOClSt13Eliz+4FNVnErjLZjjpEjFBBa93R+oVH0lznFQXO3ScWqCWmvBDgJcYE7N0OQzmKSO\nwB3A14BWwNnAm4TYhR2BTwmOu8ljxgJfJyz7ujkhnNvOBB/Ed4ADzGylpMHAb4FOwAJglJm9J6kv\ncCXQE1gG/Jjw/ux7wO6SfgUcYmZvrM/FO07alDPIsQ/wrpntDyCpKzAVGGlmL0RH3IacdvsCexBa\nnGcIgjhN0r2EKFEPApcDB5rZh9GL41zgGGA8MMbMXosBR/9gZt+RNIEQPu6uhgx1b3onb5QjsJnA\nJZIuBB4AFgHvmdkLANFPEEnFx/0ltlIzCS3fQ4n6+hAWkxgAPBqPbUWI9tuJMLHyzkSdbcu5GDMb\nTxAnbXv1q89oPk5N0aTAzOxVSYMIs47Pofx48Z/G41dLWmlrwletjucVMMvM1lowIraIi+JKKo5T\n0zQ5yCHpq8AyM7sZuBjYCeglaceY31lSS96nzQF6FuLdx3XAtokt4luSDo3pkrR9PMY96p2aohxh\nbAtcLGk1sJIwC1nA5ZLaE56/9mruic3sM0nfB34fn+taE9YXm0WYrnJVHMxoA/wJmB7/XiPpBOD7\nPsjh5B0PPJrAPTmccqm32PTNxr3pnTxQay+aHaemcIE5TorUbRexHG96f+Zy0sZbMMdJkcwFtj5e\n95JOktSh0jY5TlrUWgt2EiESsOPUBBV7Bmuh1/3QmN+O8ML6R2Y2R1Ir4EKCo/Fq4BrCy+2vAhMl\nLTCzPSplu+OkRSUHOVridf8KsKuZfS5pL+A84BCCR3wfYGDM625mH0n6T2CPtBddd5xKUUmBtcTr\nvitwg6R+gBHcoiC4Xo0zs8/jsR+VY4BPV3HyRsWewWJg0EEEoZ0D/FsZh50NTDSzAcABhK7i+tjg\niz84uaKSMTla4nXflTDDGWBUIv1R4LhCeUmFaMDuTe/UFJXsIrbE6/4iQhfxV0DyrfC1wDeBGZJW\nEgY5riBMpnxI0rs+yOHUAl9qb3r35HBainvTuze9kwNq7UWz49QULjDHSZG67SI25U3vz19OFngL\n5jgp4gJznBTJvcAkTZLU5HCo4+SR3AusFNHj3nFyTSaDHJJ+DRwJfAi8DUwBRgDPEeLXdwOONbMn\notfHH4HtCd727RP1LAWuJniE/BR4Mgv7HaelpC6w6It4CEEwbYAXCQIDaG1mQyXtB5xBEM5/EHwa\nt5a0XSxfoCPwnJmdUuJc7k3v5IosuojfBv5sZivMbAlwfyLvnvh3CmH+F8BuwM0AZjYDmJEovwq4\nu9SJ3JveyRvVfgb7NP5dRXmt6QozW5WiPY5TUbIQ2FPAAZLaxaWJRjRR/nHgcABJA4DtUrbPcVIj\n9WewGC5gAqGrN58wIXNxI4dcBfxR0mxgNmue1xyn5sjKVeo3ZjY2hlx7HJhiZtcUMmOMjT5xezlw\nWEOVmFmnDGx1nIqRlcDGS+pPCAlwg5m92NQB64tPV3HyQCYCM7PDsziP4+SNao8iOk5d86WaruJT\nVJys8RbMcVIkVwKTtErStMTn9Jg+QtJUSdMlvSzpuGrb6jjlkLcu4nIzG5hMkNSGEK5tqJn9Q1Jb\n1rhVOU6uyZvAGqIzwc6FAGb2KTCnqhY5TpnkqosItC/qIo6MceknAPMk3SbpCEkN2i1ptKTJkiav\nWtaYs4jjZEPeWrB1uogAZvZ/JG1LmM5yKvBd1g61XSg3ntCdpG2vfvUZUdWpKfLWgpXEzGaa2e8I\n4jqk2vY4TjnkXmCSOkkankgaCMyrkjmO0yzy1kVsL2laYv8h4FzgNElXExaQ+IQGuoeOk0dyJTAz\nKxXIZr9MDXGcCpErgVUS96Z38kDun8Ecp5ZxgTlOitRtF7HYm9496Z1q4C2Y46RI1QUmySRdktg/\nVdLYxP5oSa/Ez/OShlXFUMdpAVUXGCE24r9J6lGcIWkEcBwwzMy+BYwBbpW0acY2Ok6LyIPAPif4\nD57cQN4vgJ/HqFPEYDk3EOLSO07uyYPAAK4EjpBUHO96G9aNizg5pjtO7smFwMzsY+BG4IT1qcen\nqzh5IxcCi1wKHEtYQaXAy8DgonKDgVkNVeCLPzh5IzcCixMr7yCIrMBFwIWSNgaQNJDg6PuHzA10\nnBaQtxfNlwDHF3bMbIKkzYCnJRmwBDjSzN6rloGO0xyqLrBkvHkzmw90KMq/irAghOPUHFUXWFq4\nN72TB3LzDOY49YgLzHFSpG4FVvCmL45P7zhZUrcCc5w84AJznBRxgTlOitSswCSVikDlOLkhE4FJ\nOkvSSYn9cyWdKOnnkl6QNEPSmYn8+yRNkTRL0uhE+lJJl0iaDuyShe2Osz5k1YJdBxwFEBduOAx4\nH+gHDCVE6x0sabdY/hgzGwwMAU4o+CISHIGfM7PtzezJ4pO4N72TN7JaBH2upIWSdgA2AaYCOwJ7\nx22ATgTBPU4Q1cExvXdMXwisAu5u5Dy++IOTK7J0lbqW4Am/KaFF2xM438yuThaKcej3AnYxs2WS\nJgHtYvYKM1uVlcGOs75kOchxL7APoeV6OH6OkdQJQNJmkr4CdAX+GcX1LWDnDG10nIqSWQtmZp9J\nmggsiq3QI5K2Bp6RBLAUOJKw4MMYSbMJK1k+m5WNjlNpMhNYHNzYGTi0kGZmlwGXNVB834bqSE5t\ncZxaIBOBSeoPPADca2avZXFOn67i5IGsRhFfBrbM4lyOkydq1pOjKdyb3skDdSswx8kDLjDHSZHc\nxOSI8eYvJbwnWwTMJ7wr+1GiWGtCVN/+ZjY7cyMdp5nkQmAKL8LuBW4ws8Ni2vZAlziUXyh3HjDN\nxeXUCrkQGLAHsNLMxhUSzGx6skB0BP4BMChj2xynxeTlGWwA6y7y8AWSugHXA0fHOPalyrk3vZMr\n8iKwphgH3GRmTzVWyGPTO3kjLwKbxbqLPAAg6WhgC+DsTC1ynAqQF4E9BrQtmr28naTdgfOAI8zs\n86pZ5zgtJBeDHGZmcYLlpZJ+AawA5hLmgXUA7oke9wV+ZmZPZG6o4zSTXAgMwMzeJYwSOk7dkBuB\nVRr3pnfyQF6ewRynLnGBOU6K1K3ACtNVHKea1K3AHCcP5EZgkjaV9CdJb8Sovv8j6ZuSXioqN1bS\nqdWy03GaQy5GERvxpt+kqoY5znqSlxaslDf929UzyXHWn1y0YDTuTd9X0rTE/qbAb9I3yXHWn7wI\nrDHeMLOBhR1JY0sVjL6MowFademZvmWO0wR56SKW9KZvDj5dxckbeRFYg970hJVVHKdmyYXAzMyA\ng4G94jD9LOB8whpijlOz5OYZrBFv+gFF5cZmYpDjVIBctGBpsO1mXZnr3vROlalbgTlOHnCBOU6K\n1K3A3JveyQN1KzDHyQMuMMdJkdwM0xeQ9EvgcGAVsBo4DrgQ6AUsj8VeN7PvV8dCxymfXAlM0i7A\nCGCQmX0qqQewYcw+wswmV886x2k+uRIYoZVaYGafApjZAoCimIiOUzPk7RnsEaC3pFcl/SFG9i1w\ni6Rp8XNxQwf74g9O3shVC2ZmSyUNBnYlTMK8XdLpMbvJLqKZjQfGA7Tt1c9SNdZxyiBXAgMws1XA\nJGCSpJnA0dW1yHFaTq66iJK2ktQvkTQQmFctexxnfclbC9YJuDwuuPc58DphhvJdhGewwjD9AjPb\nq0o2Ok7Z5EpgZjYF+JcGsoZnbIrjVIRcdREriU9XcfJA3QrMcfKAC8xxUsQF5jgp4gJznBTJjcAk\nrYpuULMkTZd0iqQNYt5wSYsTrlLTJPkwvZN78jRMv7wQwVfSV4BbgS7AGTH/CTMbUS3jHKcl5KYF\nS2JmHxBeMB8vd6V3aphcCgzAzN4EWgFfiUm7FnUR+xYfk/Sm//DDDzO113EaIk9dxKZosouY9KYf\nMmSIe9M7VSe3LZikLQlhAz6oti2O01JyKTBJPYFxwBUxbr3j1CR56iK2jwvttSF40t8E/DaRv2vR\nQnznmNldWRroOM0lNwIzs1aN5E0CfMEvp+bIZRfRceoFF5jjpIgLzHFSxAXmOCniAnOcFHGBOU6K\nuMAcJ0VcYI6TIi4wx0kRF5jjpIjq1ZdW0hJgTrXtSNADWFBtIxK4PU3TmE1bmFnPpirIjS9iCswx\nsyHVNqKApMluT2nyZg9UxibvIjpOirjAHCdF6llg46ttQBFuT+PkzR6ogE11O8jhOHmgnlswx6k6\nLjDHSZG6E5ikfSTNkfR6YgH1LM/fW9JESS/HMOAnxvSxkt5JxHXcL2O75kqaGc89OaZ1l/SopNfi\n340ysmWrohiXH0s6Kct7JOk6SR9IeimR1uD9UOD38Ts1Q9Kgsk9kZnXzIQQqfQPYEtgQmA70z9iG\nXsCguN0ZeBXoD4wFTq3ivZkL9ChKuwg4PW6fDlxYpf/Z+8AWWd4jYDdgEPBSU/cD2A/4CyBgZ+C5\ncs9Tby3YUOB1M3vTzD4D/gQcmKUBZvaemb0Yt5cAs4HNsrShGRwI3BC3bwAOqoINewJvmFmmi92b\n2ePAR0XJpe7HgcCNFngW6CapVznnqTeBbQa8ndj/B1X8ckvqA+wAPBeTjo9djOuy6o4lMOARSVMk\njY5pm5jZe3H7fWCTjG0COAy4LbFfzXtU6n60+HtVbwLLDZI6AXcDJ5nZx8BVQF9gIPAecEnGJg0z\ns0HAvsBPJe2WzLTQF8r0nY2kDYHvAXfGpGrfoy+o1P2oN4G9A/RO7H8tpmWKpDYEcd1iZvcAmNl8\nM1tlZquBawjd2cwws3fi3w+Ae+P55xe6OvFv1mHK9wVeNLP50baq3iNK348Wf6/qTWAvAP0kfT3+\nOh4GTMjSgLjc0v8DZpvZbxPpyT77wcBLxcemaFNHSZ0L28De8fwTgKNjsaOBP2dlU+SHJLqH1bxH\nkVL3YwJwVBxN3BlYnOhKNk7Wo0YZjA7tRxi5ewP4ZRXOP4zQtZgBTIuf/QihwGfG9AlArwxt2pIw\nojodmFW4L8DGwN+A14C/At0ztKkjsBDomkjL7B4RhP0esJLwTHVsqftBGD28Mn6nZgJDyj2Pu0o5\nTorUWxfRcXKFC8xxUsQF5jgp4gJznBRxgTlOirjA1hNJq6Ln90uS7pfUrYxjljaR303STxL7X5W0\n3qt5SuqT9B7PAkkDs545kCdcYOvPcjMbaGYDCM6jP61And2ALwRmZu+a2fcrUG+mSGpNcHtygTkV\n4RkSTqCSfi7phei8emZxYUmdJP1N0otxrlbB8/8CoG9sGS9OtjySnpW0TaKOSZKGRG+N6yQ9L2lq\noq4GkTRK0n1x3tNcScdL+s947LOSuifqvyzRSg+N6d3j8TNi+e1i+lhJN0l6ivDi+CxgZDx+pKSh\nkp6J53la0lYJe+6R9FCcj3VRwtZ94j2aLulvMa1Z11s1svZ0qLcPsDT+bUVwWt0n7u9NCJoiwg/Z\nA8BuRce0BrrE7R7A67F8H9aep/TFPnAycGbc7kWI/whwHnBk3O5G8GbpWGRrsp5R8XydgZ7AYmBM\nzPsdwUkZYBJwTdzeLXH85cAZcfs7wLS4PRaYArRPnOeKhA1dgNZxey/g7kS5NwlrcbcD5hH8/3oS\nPNm/Hst1L/d68/Cp58CjWdFe0jRCyzUbeDSm7x0/U+N+J6Af8HjiWAHnRc/21bGOpqaM3AE8ApwB\n/AAoPJvtDXxP0qlxvx2webSpFBMtzFlbImkxcH9Mnwlslyh3G4Q5VJK6xOfMYcAhMf0xSRtL6hLL\nTzCz5SXO2RW4QVI/gktZm0Te38xsMYCklwmTMDcCHjezt+K5CnO4WnK9meMCW3+Wm9lASR2AhwnP\nYL8niOd8M7u6kWOPIPxCDzazlZLmEr4oJTGzdyQtjF2ykcCYmCXgEDNrTrjwTxPbqxP7q1n7u1Hs\nT9eUf90njeSdTRD2wXG+3KQS9qyi8e9nS643c/wZrEKY2TLgBOCU+HD/MHBMnBeGpM0kfaXosK7A\nB1FcexB+sQGWELpupbgdOI3gKDsjpj0M/Cx68yNph0pcV2RkrHMYwZN8MfAE4QcCScOBBRbmvRVT\nfC1dWTPVY1QZ534W2E3S1+O5usf0NK+3YrjAKoiZTSV4gv/QzB4BbgWekTST0JUrFs0twJCYfxTw\nSqxnIfBUHFS4uIFT3UWYinNHIu1sQndrhqRZcb9SrJA0FRhH8DqH8Kw1WNIMwqDM0SWOnQj0Lwxy\nEOJenB/ra7IHZWYfAqOBeyRNJ/y4QLrXWzHcm95pFEmTCIFoJlfbllrEWzDHSRFvwRwnRbwFc5wU\ncYE5Toq4wBwnRVxgjpMiLjDHSZH/D+tmzfQVO/F8AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}